% Part III: Least Squares - Estimating parameters k, I(0), and beta
clc; clear; close all;

% Parameters and initial conditions
beta = 0.3; % Transmission rate
gamma = 0.1; % Recovery rate
S0 = 990; % Initial susceptible population
I0 = 10; % Initial infected population
R0 = 0; % Initial recovered population
N = S0 + I0 + R0; % Total population
y0 = [S0; I0; R0]; % Initial conditions vector

% Simulation parameters
h = 1; % Time step (days)
T = 30; % Total simulation time (days)
time = 0:h:T;

% SIR model function
sir_model = @(t, y, b, g, N) [
    -(b / N) * y(1) * y(2);
    (b / N) * y(1) * y(2) - g * y(2);
    g * y(2)];

% Solve the full non-linear SIR model using RK4
results = zeros(3, length(time));
results(:, 1) = y0; % Initial conditions

for i = 1:length(time) - 1
    t = time(i);
    y = results(:, i);
    % RK4 steps
    k1 = sir_model(t, y, beta, gamma, N);
    k2 = sir_model(t + h / 2, y + h * k1 / 2, beta, gamma, N);
    k3 = sir_model(t + h / 2, y + h * k2 / 2, beta, gamma, N);
    k4 = sir_model(t + h, y + h * k3, beta, gamma, N);
    results(:, i + 1) = y + (h / 6) * (k1 + 2 * k2 + 2 * k3 + k4);
end

% Extract the "true" infected data I(t)
I_true = results(2, :);

% Prepare data for least squares fit
t_fit = time; % Use all 30 days
ln_I = log(I_true); % ln(I(t))

% Fit using linear least squares: ln(I(t)) = ln(I(0)) + k * t
A = [ones(length(t_fit), 1), t_fit']; % Design matrix
b = ln_I'; % Data vector

x = A \ b; % Solve the least squares problem
ln_I0_est = x(1); % Estimate of ln(I(0))
k_est = x(2); % Estimate of k

% Calculate I(0) and beta
I0_est = exp(ln_I0_est); % Estimate of I(0)
beta_est = (k_est + gamma) * N / S0; % Estimate of beta

% Display results
fprintf('Using 30 days of data:\n');
fprintf('Estimated I(0): %.2f (True: %.2f)\n', I0_est, I0);
fprintf('Estimated beta: %.4f (True: %.4f)\n', beta_est, beta);

% Repeat for only 10 days of data
t_fit_10 = time(1:10); % First 10 days
ln_I_10 = log(I_true(1:10)); % ln(I(t)) for 10 days
A_10 = [ones(length(t_fit_10), 1), t_fit_10']; % Design matrix
b_10 = ln_I_10'; % Data vector

x_10 = A_10 \ b_10; % Solve the least squares problem
ln_I0_est_10 = x_10(1); % Estimate of ln(I(0)) using 10 days
k_est_10 = x_10(2); % Estimate of k using 10 days

% Calculate I(0) and beta using 10 days
I0_est_10 = exp(ln_I0_est_10); % Estimate of I(0)
beta_est_10 = (k_est_10 + gamma) * N / S0; % Estimate of beta

% Display results
fprintf('\nUsing 10 days of data:\n');
fprintf('Estimated I(0): %.2f (True: %.2f)\n', I0_est_10, I0);
fprintf('Estimated beta: %.4f (True: %.4f)\n', beta_est_10, beta);

% Plotting results
figure;
plot(t_fit, ln_I, 'ro-', 'LineWidth', 1.5, 'DisplayName', 'True ln(I(t))');
hold on;
plot(t_fit, A * x, 'b--', 'LineWidth', 1.5, 'DisplayName', 'Fit (30 days)');
plot(t_fit_10, A_10 * x_10, 'g--', 'LineWidth', 1.5, 'DisplayName', 'Fit (10 days)');
xlabel('Time (days)');
ylabel('ln(I(t))');
title('Least Squares Fit of ln(I(t))');
legend('Location', 'Best');
grid on;

%The estimates of I(0) and Î² do not improve with only 10 days of data compared to 30 days because the shorter dataset provides less information, making the fit more sensitive to noise and deviations from the assumption that S(t) remains constant. Longer datasets better capture the dynamics of the epidemic, leading to more accurate parameter estimates.
